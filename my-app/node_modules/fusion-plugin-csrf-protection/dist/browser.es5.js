'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fusionCore = require('fusion-core');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var methods = {
  POST: 1,
  PUT: 1,
  PATCH: 1,
  DELETE: 1
};
function verifyMethod(method) {
  return methods[method];
}
function verifyExpiry(token, expire) {
  if (!token) return false;

  var _token$split = token.split('-'),
      timestamp = _token$split[0];

  var elapsed = Math.round(Date.now() / 1000) - Number(timestamp);
  if (isNaN(elapsed) || elapsed < 0 || elapsed >= expire) return false;
  return true;
}
var CsrfExpireToken = fusionCore.createToken('CsrfExpireToken');
var CsrfIgnoreRoutesToken = fusionCore.createToken('CsrfIgnoreRoutesToken');
var FetchForCsrfToken = fusionCore.createToken('FetchForCsrfToken');

var _templateObject = /*#__PURE__*/ _taggedTemplateLiteralLoose(["<script id=\"__CSRF_TOKEN__\" type=\"application/json\">", "</script>"], ["<script id=\"__CSRF_TOKEN__\" type=\"application/json\">", "</script>"]);

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var plugin$2 = true && fusionCore.createPlugin({
  deps: {
    fetch: FetchForCsrfToken,
    expire: CsrfExpireToken.optional
  },
  provides: function provides(_ref) {
    var fetch = _ref.fetch,
        _ref$expire = _ref.expire,
        expire = _ref$expire === void 0 ? 86400 : _ref$expire;
    var prefix = window.__ROUTE_PREFIX__ || ''; // created by fusion-core/src/server

    var tokenElement = document.getElementById('__CSRF_TOKEN__');
    var token = tokenElement ? JSON.parse(fusionCore.unescape(tokenElement.textContent)) : '';

    var fetchWithCsrfToken = function fetchWithCsrfToken(url, options) {
      if (!options) options = {}; // $FlowFixMe

      var isCsrfMethod = verifyMethod(options.method || 'GET');
      var isValid = verifyExpiry(String(token), expire);
      var isTokenRequired = !isValid || !token;

      if (isCsrfMethod && isTokenRequired) {
        // TODO(#3) don't append prefix if injected fetch also injects prefix
        return fetch(prefix + '/csrf-token', {
          method: 'POST',
          credentials: 'same-origin'
        }).then(function (r) {
          token = r.headers.get('x-csrf-token');
          return request();
        });
      } else {
        return request();
      }

      function request() {
        // $FlowFixMe
        return fetch(prefix + url, _objectSpread({}, options, {
          credentials: 'same-origin',
          headers: _objectSpread({}, options && options.headers || {}, {
            'x-csrf-token': token
          })
        }));
      }
    };

    return fetchWithCsrfToken;
  }
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var index = plugin$2;

exports.default = index;
exports.FetchForCsrfToken = FetchForCsrfToken;
exports.CsrfExpireToken = CsrfExpireToken;
exports.CsrfIgnoreRoutesToken = CsrfIgnoreRoutesToken;
//# sourceMappingURL=browser.es5.js.map
